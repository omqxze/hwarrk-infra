plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.11'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testCompileOnly 'org.projectlombok:lombok' // 테스트 의존성 추가

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // JWT
    implementation 'com.auth0:java-jwt:4.2.1'

    // MySQL
    runtimeOnly 'com.mysql:mysql-connector-j'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // QueryDSL 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // AWS S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // h2
    runtimeOnly 'com.h2database:h2'
    testRuntimeOnly 'com.h2database:h2'

    // mockito
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.12.0'

    // 객체-JSON에 대해 직렬화/역직렬화
    implementation 'com.fasterxml.jackson.core:jackson-core:latest.release'
    implementation 'com.fasterxml.jackson.core:jackson-databind:latest.release'

    // 채팅
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-amqp' // 외부 메시지 브로커 사용 ex) rabbitmq
    implementation 'org.springframework:spring-messaging' // 메시지 처리 기능 ex) @MessageMapping
    implementation 'org.springframework.boot:spring-boot-starter-reactor-netty:3.0.0' // rabbitmq와의 비동기 네트워크 처리

    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.68.Final:osx-aarch_64' // netty-macOS 호환

    // mongoDB
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
}

// Querydsl 설정부
def generated = 'build/generated/querydsl'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}
// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}
// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    useJUnitPlatform()
}

// 빌드 시 테스트 제거
tasks.withType(Test) {
    enabled = false
}
